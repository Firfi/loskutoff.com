<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Blaze, | firfiBlog]]></title>
  <link href="http://Firfi.github.io/blog/categories/blaze/atom.xml" rel="self"/>
  <link href="http://Firfi.github.io/"/>
  <updated>2016-10-19T17:14:35+07:00</updated>
  <id>http://Firfi.github.io/</id>
  <author>
    <name><![CDATA[Igor Loskutoff]]></name>
    <email><![CDATA[igor.loskutoff@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moving MeteorJS From Blaze to React Frontend Infrastructure]]></title>
    <link href="http://Firfi.github.io/blog/moving-meteorjs-from-blaze-to-react-frontend-infrastructure/"/>
    <updated>2016-01-14T01:53:19+07:00</updated>
    <id>http://Firfi.github.io/blog/moving-meteorjs-from-blaze-to-react-frontend-infrastructure</id>
    <content type="html"><![CDATA[<p>Making rich frontend SPA is always challenging task, especially when you don’t know what right tools to choose.</p>

<p>In this post I’ll propose one of the best at the moment tools and a way to integrate it with MeteorJS infrastructure.</p>

<p>One big project which I’m working on currently is <a href="https://fiddlequest.com/">Fiddlequest</a>, tool for musical students, their parents and teachers.</p>

<p>It have lot of dynamic frontend components with complicated requirements. They should be fast, reactive and real-time.</p>

<p>It was a real challenge to write this project on Blaze, when I didn’t know how to integrate React there.</p>

<p>When I found a good way, it was already full of Blaze templates which was not easy to maintain.</p>

<p>Simply rewriting wasn’t an option as it’d lead to stopping developing new features, so I found it very handy to rewrite it component by component from time to time, not stopping introducing new features.</p>

<p>My objective here is to show reader why and how to move Meteor project from Blaze to React.</p>

<!--more-->

<h2 id="why-should-i-do-it">Why should I do it</h2>

<h3 id="blaze-is-deprecated">1. Blaze is deprecated</h3>

<p>Main reason is simple: Meteor Development Group announced <a href="https://forums.meteor.com/t/next-steps-on-blaze-and-the-view-layer/13561">abandonment of Blaze</a>.</p>

<p>As a side note, it isn’t the first time MDG changing template engine: before Blaze was <a href="http://info.meteor.com/blog/meteor-080-introducing-blaze">Spark</a>.</p>

<p>However, I’m pretty sure that this time new template engine knowledge will be really useful for you as React don’t going anywhere for long time from now
(on contrary to Angular which in it’s place being substituted by completely new and different <a href="https://angular.io/">Angular 2</a>, keeping only a name).</p>

<h3 id="react-is-really-better-for-you">2. React is really better for you</h3>

<ul>
  <li>
    <p>It working with state right way. You don’t have piece of data lingering copied over in several different components.
It <em>makes</em> you keep your master data in one place, handling to components only projection of this data. See <a href="https://facebook.github.io/react/docs/thinking-in-react.html">official React docs</a></p>
  </li>
  <li>
    <p>It have nice component system, making you write independent components which are really easy (I did it many times and happy so far) to move around your application UI should requirements change.</p>
  </li>
</ul>

<p>I.e. I have multi step signup flow with client+server-side validations. One day, I got a requirement from client to have it working not only on the /signin page, but also on landing page through modal dialog. It was as easy as just writing &lt;SignFlow … /&gt; inside my modal component body!</p>

<ul>
  <li>It have strong community support, meaning there’s lots of good quality components which you can just plug in in your application and use. On contrary, Blaze components are rare and have poor code quality overall, crawling with bugs. Good riddance!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Isolated Blaze Components in MeteorJS Application]]></title>
    <link href="http://Firfi.github.io/blog/isolated-blaze-components-in-meteorjs-application/"/>
    <updated>2015-03-29T15:28:51+07:00</updated>
    <id>http://Firfi.github.io/blog/isolated-blaze-components-in-meteorjs-application</id>
    <content type="html"><![CDATA[<p>This article is an attempt to describe non-common in Meteor community approach of handling Blaze templates as isolated components.
There’s great blank space on this topic I found trying to implement it so code below would be result of my experiments and observations.
I use this approach in my current project.</p>

<p><em>Update 31 Marth</em> @Ben’s Comment to this article proposed a nice @meteorhacks library <a href="https://github.com/meteorhacks/flow-components">Flow-components</a>
that does thing by same principles I described here. </p>

<!--more-->

<hr />

<p>I implemented my last project with <a href="https://www.meteor.com/">MeteorJS</a> framework.
Though it gives nice development speed, it also have many architectural drawbacks.
I wasn’t particularly happy with <a href="https://www.meteor.com/blaze">Blaze</a> template engine.
As I come from Angular world, I got used to wrap parts of my application frontend in isolated modules, bunch of code,
including js, html and (!) css.
Structure is something like described in <a href="https://github.com/johnpapa/angular-styleguide#style-y152">Johnpapa’s Angular Styleguide</a>.
In Angular, I used directives for that so I can just drop some directive in any place of application, honouring it’s inner API that expressed through directive parameters.
Trying to write something like that for Blaze I found it rather cumbersome, as I want from component next functionality:</p>

<ul>
  <li>1) Parameters with dual binding that are passed explicitly</li>
  <li>2) Event system that gives possibility pop up events from components</li>
</ul>

<p>I was able to resolve 1) and 2) like this:</p>

<ul>
  <li>For 1), parameters with dual binding, I was just passing <a href="https://atmospherejs.com/meteor/reactive-var">ReactiveVars</a> links into component like this:</li>
  <li>For 2), I used EventEmitter. Option is to just use callbacks.</li>
</ul>

<div><div class="CodeRay">
  <div class="code"><pre><span style="color:#777">// client/myTemplate.js</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">use strict</span><span style="color:#710">'</span></span>;

<span style="color:#080;font-weight:bold">var</span> templateClass = Template.myTemplate;

templateClass.onCreated(<span style="color:#080;font-weight:bold">function</span>() {
    <span style="color:#777">// set initial state</span>
    <span style="color:#080;font-weight:bold">var</span> template = <span style="color:#950">this</span>;
    template.data = template.data || {}; <span style="color:#777">// sic! *1</span>
    template.state = {
        <span style="color:#606">myDualBindingVar</span>: <span style="color:#080;font-weight:bold">new</span> ReactiveVar(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">default</span><span style="color:#710">'</span></span>), <span style="color:#777">// sic! *2</span>
        <span style="color:#606">myEventEmitter</span>: <span style="color:#080;font-weight:bold">new</span> EventEmitter(),
        <span style="color:#606">parentEmitter</span>: template.data.eventEmitter <span style="color:#777">// now I can get parent events</span>
    };
});

templateClass.helpers({
    <span style="color:#06B;font-weight:bold">myDualBindingVar</span>: <span style="color:#080;font-weight:bold">function</span>() { <span style="color:#777">// if I want dual binding</span>
        <span style="color:#080;font-weight:bold">return</span> Template.instance().state.myDualBindingVar; <span style="color:#777">// sic! *3</span>
    },
    <span style="color:#06B;font-weight:bold">myDualBinding</span>: <span style="color:#080;font-weight:bold">function</span>() { <span style="color:#777">// if I want to just pass this variable in component on initialisation or if I want to draw in in Blaze template of current component</span>
        <span style="color:#080;font-weight:bold">return</span> Template.instance().state.myDualBindingVar.get();
    },
    <span style="color:#06B;font-weight:bold">eventEmitter</span>: <span style="color:#080;font-weight:bold">function</span>() {
        <span style="color:#080;font-weight:bold">return</span> Template.instance().state.myEventEmitter;
    }
});
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span style="color:#777">&lt;!-- client/myTemplate.html --&gt;</span>
<span style="color:#070;font-weight:bold">&lt;template</span> <span style="color:#b48">name</span>=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">myTemplate</span><span style="color:#710">&quot;</span></span><span style="color:#070;font-weight:bold">&gt;</span>
    <span style="color:#070;font-weight:bold">&lt;div</span> <span style="color:#b48">class</span>=<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">&quot;</span><span style="color:#D20">my-template</span><span style="color:#710">&quot;</span></span><span style="color:#070;font-weight:bold">&gt;</span> <span style="color:#777">&lt;!-- root element with class corresponding to component name --&gt;</span>
        
    <span style="color:#070;font-weight:bold">&lt;/div&gt;</span>
<span style="color:#070;font-weight:bold">&lt;/template&gt;</span>
</pre></div>
</div>
</div>

<div><div class="CodeRay">
  <div class="code"><pre><span style="color:#777">// client/mySecondTemplate.js</span>
<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">use strict</span><span style="color:#710">'</span></span>;

<span style="color:#080;font-weight:bold">var</span> templateClass = Template.mySecondTemplate;

mySecondTemplate.onCreated(<span style="color:#080;font-weight:bold">function</span>() {
    <span style="color:#777">// set initial state</span>
    <span style="color:#080;font-weight:bold">var</span> template = <span style="color:#950">this</span>;
    template.data = template.data || {};
    template.state = {
        <span style="color:#606">myDualBindingVar</span>: template.data.myDualBindingVar,
        <span style="color:#606">parentEmitter</span>: template.data.eventEmitter
    };
    template.autorun(<span style="color:#080;font-weight:bold">function</span>() {
        <span style="color:#080;font-weight:bold">var</span> myDualBinding = template.state.myDualBindingVar.get();
        <span style="color:#777">// do stuff with parent var usage</span>
    });
});

mySecondTemplate.events({
    <span style="color:#606"><span style="color:#404">'</span><span>click .someButton</span><span style="color:#404">'</span></span>: <span style="color:#080;font-weight:bold">function</span>() {
        <span style="color:#080;font-weight:bold">var</span> emitter = Template.instance().state.parentEmitter;
        emitter.emit(<span style="background-color:hsla(0,100%,50%,0.05)"><span style="color:#710">'</span><span style="color:#D20">someButtonClicked</span><span style="color:#710">'</span></span>);
    }
});

</pre></div>
</div>
</div>

<p>Here I’ll explain decisions that I made in code above.</p>

<p>*1: I write <code><span class="CodeRay">template.data = template.data || {};</span></code> in each component, as current Blaze approach is just left it undefined if there’s no parameters given.
I’m sure they have the reasons doing this. But these reasons make me do additional ‘if/else’-like check like that.</p>

<p>*2: <code>ReactiveVar</code> is a package that you have to install additionally. Most of tutorials I found use just Session API. Though it would work, I strongly disapprove this approach as we’re going back to 90’th global state with that.
Additionally, it you have several components on page, i.e. login widget on page itself and login widget in popup, using Session will be a problem as it will cause names clash issue.</p>

<p>*3: To get current template instance that we set up in onCreate I use Template.instance() call. That’s right, it’s call on singleton that returns you current template instance. I didn’t found any better way doing this.
Also, getting current template instance doesn’t seems very popular thing too (because meteor people store everything in Session I presume) so before I started investigating this issue there wasn’t real good answer ‘how to get current template instance’ on StackOverflow (It was documented officially though).</p>

<hr />

<p>In next article that about to be written I’ll describe another solutions for component-like frontend architecture, including Angular and ReactJS.
Also, as I started to use ReactJS instead of pure Blaze lately, I want to describe how to set up and use it, as there seems to not enough information in community how to do it.</p>
]]></content>
  </entry>
  
</feed>
